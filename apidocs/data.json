{
    "project": {},
    "files": {
        "noname\\assetManager.js": {
            "name": "noname\\assetManager.js",
            "modules": {},
            "classes": {
                "AssetManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\clock.js": {
            "name": "noname\\clock.js",
            "modules": {},
            "classes": {
                "Clock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\events.js": {
            "name": "noname\\events.js",
            "modules": {},
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\fingers.js": {
            "name": "noname\\fingers.js",
            "modules": {},
            "classes": {
                "Fingers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\mathManager.js": {
            "name": "noname\\mathManager.js",
            "modules": {},
            "classes": {
                "MathManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\stateManager.js": {
            "name": "noname\\stateManager.js",
            "modules": {},
            "classes": {
                "StateManager": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AssetManager": {
            "name": "AssetManager",
            "shortname": "AssetManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\assetManager.js",
            "line": 1,
            "description": "Loads and cache game assets like images and audio."
        },
        "Clock": {
            "name": "Clock",
            "shortname": "Clock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\clock.js",
            "line": 1,
            "description": "Tracking time within a game, synchronize animations and manage time related\nevents like setTimeout and setInterval.\nAll clocks are updated by the clockManager who has a 'master' clock itself to\nsync created clocks. All entities are synchronizez with the master clock untill\nyou change it.\nYou should not directly instantiate this class because it will not added to The\nclockManager pool and therefore will not be updated. Use the add method on the\nClockManager instead."
        },
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\events.js",
            "line": 1,
            "description": "Used to create custom events and attach to them one or more listeners that\ncan be triggered once or multiple times.",
            "is_constructor": 1
        },
        "Fingers": {
            "name": "Fingers",
            "shortname": "Fingers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\fingers.js",
            "line": 1,
            "description": "Track fingers touching on the game surface",
            "params": [
                {
                    "name": "_game",
                    "description": "[description]",
                    "type": "Object"
                }
            ]
        },
        "MathManager": {
            "name": "MathManager",
            "shortname": "MathManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\mathManager.js",
            "line": 1,
            "description": "This class have a cosy set of Math methods and helpers."
        },
        "StateManager": {
            "name": "StateManager",
            "shortname": "StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\stateManager.js",
            "line": 1,
            "description": "This manager allows you to add and switch your states. To change from\ngame state to main menu state or map A to map B are the daily bread of this manager."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "noname\\assetManager.js",
            "line": 9,
            "description": "Is true if the asset manager is loading assets otherwise is false.",
            "itemtype": "property",
            "name": "loading",
            "type": "{Boolean}",
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 16,
            "description": "An array of assets that were queued in the preload phase.",
            "itemtype": "property",
            "name": "queue",
            "type": "{Array}",
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 23,
            "description": "assets loading errors count.",
            "itemtype": "property",
            "name": "success",
            "type": "{Number}",
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 30,
            "description": "assets loading errors count.",
            "itemtype": "property",
            "name": "errors",
            "type": "{Number}",
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 37,
            "description": "The name of the latest loaded assset.",
            "itemtype": "property",
            "name": "lastLoaded",
            "type": "{String}",
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 44,
            "description": "The array holding all the assets of the game.",
            "itemtype": "property",
            "name": "pool",
            "type": "{Array}",
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 57,
            "description": "Returns an array with the games assets as items.",
            "itemtype": "method",
            "name": "list",
            "return": {
                "description": "Assets array.",
                "type": "Array"
            },
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 66,
            "description": "Queue an audio file to be loaded when the loadAll() method will be called.",
            "itemtype": "method",
            "name": "queueAudio",
            "params": [
                {
                    "name": "_name",
                    "description": "The asset name ('shot')",
                    "type": "String"
                },
                {
                    "name": "_path",
                    "description": "The path of the asset (asset/path/shot.wav)",
                    "type": "String"
                }
            ],
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 80,
            "description": "Queue an image file to be loaded when the loadAll() method will be called.",
            "itemtype": "method",
            "name": "queueImage",
            "params": [
                {
                    "name": "_name",
                    "description": "The asset name ('player')",
                    "type": "String"
                },
                {
                    "name": "_path",
                    "description": "The path of the asset (asset/path/player.png)",
                    "type": "String"
                }
            ],
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 94,
            "description": "Retrieves an asset from the assetManager pool.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "_name",
                    "description": "The name of the asset to be retrieved.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "asset A game asset like an Image or an Audio file.",
                "type": "Object"
            },
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 177,
            "description": "Returns the loading progress in percent.",
            "itemtype": "method",
            "name": "progress",
            "return": {
                "description": "progress The loading progress in percent.",
                "type": "Number"
            },
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 190,
            "description": "Returns true if all assets were loaded.",
            "itemtype": "method",
            "name": "loadComplete",
            "return": {
                "description": "boolean Is true if all assets were loaded.",
                "type": "Boolean"
            },
            "class": "AssetManager"
        },
        {
            "file": "noname\\clock.js",
            "line": 17,
            "description": "Is actually the game loop delta.",
            "itemtype": "property",
            "name": "current",
            "type": "{Number}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 24,
            "description": "Milliseconds since the Clock was started.",
            "itemtype": "property",
            "name": "current",
            "type": "{Number}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 33,
            "description": "controls how fast time elapses on that clock.",
            "itemtype": "property",
            "name": "current",
            "type": "{Number}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 40,
            "description": "If the clock is paused or not.",
            "itemtype": "property",
            "name": "current",
            "type": "{Boolean}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 47,
            "description": "Actual delta time divided by desired delta.",
            "itemtype": "property",
            "name": "current",
            "type": "{Number}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 54,
            "description": "An array of clock events.",
            "itemtype": "property",
            "name": "current",
            "type": "{Array}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 61,
            "description": "Update the clock properties.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "_delta",
                    "description": "The current loop delta.",
                    "type": "Number"
                }
            ],
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 78,
            "description": "Calls a function at specified intervals (in milliseconds). It is synchronized\nwhith the clock so motion will be considered in th equation.",
            "itemtype": "method",
            "name": "setInterval",
            "params": [
                {
                    "name": "_function",
                    "description": "The function that will be called.",
                    "type": "Function"
                },
                {
                    "name": "_milliseconds",
                    "description": "The interval time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "_context",
                    "description": "What will be 'this' in the function.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "event the event that holds the event data.",
                "type": "Object"
            },
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 91,
            "description": "Calls a function after a specified number of milliseconds. It is synchronized\nwhith the clock so motion will be considered in th equation.",
            "itemtype": "method",
            "name": "setTimeout",
            "params": [
                {
                    "name": "_function",
                    "description": "The function that will be called.",
                    "type": "Function"
                },
                {
                    "name": "_milliseconds",
                    "description": "The interval time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "_context",
                    "description": "What will be 'this' in the function.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "event the event that holds the event data.",
                "type": "Object"
            },
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 116,
            "description": "Removes a clock event from the clock events array.",
            "itemtype": "method",
            "name": "clearEvent",
            "params": [
                {
                    "name": "_event",
                    "description": "The event that will be removed.",
                    "type": "Event"
                }
            ],
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 142,
            "description": "Pauses the clock but not the game.",
            "itemtype": "method",
            "name": "pause",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 150,
            "description": "Unpauses the clock.",
            "itemtype": "method",
            "name": "continue",
            "class": "Clock"
        },
        {
            "file": "noname\\events.js",
            "line": 11,
            "description": "All the created events",
            "itemtype": "property",
            "name": "pool",
            "type": "{Events Array}",
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 19,
            "description": "All the emitted events the will be triggered in the next update call",
            "itemtype": "property",
            "name": "emitted",
            "type": "{Emitted events Array}",
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 27,
            "description": "Returns the event if exists.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Event"
            },
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 44,
            "description": "Returns the listeners of an event.",
            "itemtype": "method",
            "name": "getListeners",
            "params": [
                {
                    "name": "Event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Listeners array"
            },
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 55,
            "description": "Returns the listener of an event if it have it.",
            "itemtype": "method",
            "name": "getListener",
            "params": [
                {
                    "name": "Event",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "Listener",
                    "description": "(the function that will be called)",
                    "type": "Listener"
                }
            ],
            "return": {
                "description": "",
                "type": "Listeners"
            },
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 73,
            "description": "Creates an event and adds to it an event listener.\nIf the event already exists, it just adds the listener to the event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "Event",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "Listener",
                    "description": "(the function that will be called)",
                    "type": "Function"
                },
                {
                    "name": "Priority.",
                    "description": "The smaller the higher the priority.",
                    "type": "Number"
                }
            ],
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 101,
            "description": "The same as \"on\" but the listener will be executed only once.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "Event",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "Listener",
                    "description": "(the function that will be called)",
                    "type": "Function"
                },
                {
                    "name": "Priority.",
                    "description": "The smaller the higher the priority.",
                    "type": "Number"
                }
            ],
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 113,
            "description": "Removes a listener of an event. If the event have no more listeners\nthe event will be removed to.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "Event",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "Listener",
                    "description": "(the function that will be called)",
                    "type": "Function"
                }
            ],
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 140,
            "description": "Adds the event to the emitted events pool. The listeners of this events\nwill be emitted when the \"update\" method will be called in order of priority.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "Event",
                    "description": "name",
                    "type": "String"
                }
            ],
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 154,
            "description": "Removes all events in the pool.",
            "itemtype": "method",
            "name": "clear",
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 163,
            "description": "Call all the listeners functions of the emitted events order by priority.\nand removes the listeners that have trigger only once.",
            "itemtype": "method",
            "name": "update",
            "class": "Events"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 9,
            "description": "Returns a random number between a min and a max number.",
            "params": [
                {
                    "name": "_min",
                    "description": ""
                },
                {
                    "name": "_max",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 19,
            "description": "Returns a random rounded number between a min and a max number.",
            "params": [
                {
                    "name": "_min",
                    "description": ""
                },
                {
                    "name": "_max",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 29,
            "description": "Will return a random choice given an array of choices.",
            "params": [
                {
                    "name": "_choices",
                    "description": "Array of choices."
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 38,
            "description": "Returns true or false randomly.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 46,
            "description": "Limit a given number to given min and max boundaries.",
            "params": [
                {
                    "name": "_x",
                    "description": ""
                },
                {
                    "name": "_min",
                    "description": ""
                },
                {
                    "name": "_max",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 57,
            "description": "Returns true if a number is >= than the min number and\n<= than the max number.",
            "params": [
                {
                    "name": "_n",
                    "description": "The number to check."
                },
                {
                    "name": "_min",
                    "description": "the min number."
                },
                {
                    "name": "_max",
                    "description": "the max number."
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 69,
            "description": "Converts degrees to radians.",
            "itemtype": "method",
            "name": "toRadians",
            "params": [
                {
                    "name": "_degrees",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 79,
            "description": "Converts radians to degrees.",
            "itemtype": "method",
            "name": "toDegrees",
            "params": [
                {
                    "name": "_radians",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 89,
            "description": "Returns the distance between 2 points.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "_x1",
                    "description": ""
                },
                {
                    "name": "_y1",
                    "description": ""
                },
                {
                    "name": "_x2",
                    "description": ""
                },
                {
                    "name": "_y2",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 102,
            "description": "Calculate an angle from a given point.",
            "itemtype": "method",
            "name": "pointToAngle",
            "params": [
                {
                    "name": "_originX",
                    "description": "Origin x"
                },
                {
                    "name": "_originY",
                    "description": "Origin y"
                },
                {
                    "name": "_pointX",
                    "description": "Point x"
                },
                {
                    "name": "_pointY",
                    "description": "Point y"
                }
            ],
            "return": {
                "description": "The angle in radians",
                "type": "Number"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\mathManager.js",
            "line": 115,
            "description": "Calculates a point from a given angle.",
            "itemtype": "method",
            "name": "angleToPoint",
            "params": [
                {
                    "name": "_angle",
                    "description": "an angle in radians."
                },
                {
                    "name": "_originX",
                    "description": "Origin x."
                },
                {
                    "name": "_originY",
                    "description": "Origin y."
                },
                {
                    "name": "_radius",
                    "description": "How far the point will be from the origin."
                }
            ],
            "return": {
                "description": "}",
                "type": "X: *, y: *"
            },
            "class": "MathManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 10,
            "description": "The current state thst being played.",
            "itemtype": "property",
            "name": "current",
            "type": "{Object}",
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 17,
            "description": "The array holding all the states of the game.",
            "itemtype": "property",
            "name": "pool",
            "type": "{Array}",
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 24,
            "description": "Add all the states given in the game setting object.\nIf specified in the game settings will set the initial state otherwise the first\nelement in the array will be used as initial state.",
            "itemtype": "method",
            "name": "init",
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 41,
            "description": "Adds a new state object to the pool.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "_state",
                    "description": "The state object you want to add to the pool.",
                    "type": "Object"
                }
            ],
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 50,
            "description": "Set the given state as current (active) state.",
            "itemtype": "method",
            "name": "switch",
            "params": [
                {
                    "name": "_stateName",
                    "description": "The state name you want to switch to.",
                    "type": "String"
                }
            ],
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 63,
            "description": "Get a state by name.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "_stateName",
                    "description": "The name of the state you want to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a state otherwise returns false.",
                "type": "Object"
            },
            "class": "StateManager"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:9"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:19"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:29"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:38"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:46"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:57"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:69"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:79"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:89"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:102"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " noname\\mathManager.js:115"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " noname\\mathManager.js:115"
        },
        {
            "message": "Missing item type\nReturns a random number between a min and a max number.",
            "line": " noname\\mathManager.js:9"
        },
        {
            "message": "Missing item type\nReturns a random rounded number between a min and a max number.",
            "line": " noname\\mathManager.js:19"
        },
        {
            "message": "Missing item type\nWill return a random choice given an array of choices.",
            "line": " noname\\mathManager.js:29"
        },
        {
            "message": "Missing item type\nReturns true or false randomly.",
            "line": " noname\\mathManager.js:38"
        },
        {
            "message": "Missing item type\nLimit a given number to given min and max boundaries.",
            "line": " noname\\mathManager.js:46"
        },
        {
            "message": "Missing item type\nReturns true if a number is >= than the min number and\n<= than the max number.",
            "line": " noname\\mathManager.js:57"
        }
    ]
}