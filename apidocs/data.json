{
    "project": {},
    "files": {
        "noname\\assetManager.js": {
            "name": "noname\\assetManager.js",
            "modules": {},
            "classes": {
                "AssetManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\clock.js": {
            "name": "noname\\clock.js",
            "modules": {},
            "classes": {
                "Clock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\events.js": {
            "name": "noname\\events.js",
            "modules": {},
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\fingers.js": {
            "name": "noname\\fingers.js",
            "modules": {},
            "classes": {
                "Fingers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "noname\\stateManager.js": {
            "name": "noname\\stateManager.js",
            "modules": {},
            "classes": {
                "StateManager": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AssetManager": {
            "name": "AssetManager",
            "shortname": "AssetManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\assetManager.js",
            "line": 1,
            "description": "Loads and cache game assets like images and audio."
        },
        "Clock": {
            "name": "Clock",
            "shortname": "Clock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\clock.js",
            "line": 1,
            "description": "Tracking time within a game, synchronize animations and manage time related\nevents like setTimeout and setInterval.\nAll clocks are updated by the clockManager who has a 'master' clock itself to\nsync created clocks. All entities are synchronizez with the master clock untill\nyou change it.\nYou should not directly instantiate this class because it will not added to The\nclockManager pool and therefore will not be updated. Use the add method on the\nClockManager instead."
        },
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\events.js",
            "line": 1,
            "description": "Used to create custom events and attach to them one or more listeners that\ncan be triggered once or multiple times.",
            "is_constructor": 1
        },
        "Fingers": {
            "name": "Fingers",
            "shortname": "Fingers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\fingers.js",
            "line": 1,
            "description": "Track fingers touching on the game surface",
            "params": [
                {
                    "name": "_game",
                    "description": "[description]",
                    "type": "Object"
                }
            ]
        },
        "StateManager": {
            "name": "StateManager",
            "shortname": "StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "noname\\stateManager.js",
            "line": 1,
            "description": "This manager allows you to add and switch your states. To change from\ngame state to main menu state or map A to map B are the daily bread of this manager."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "noname\\assetManager.js",
            "line": 22,
            "description": "Returns an array with the games assets as items.",
            "return": {
                "description": "Assets array.",
                "type": "Array"
            },
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 31,
            "description": "Queue an audio file to be loaded when the loadAll() method will be called.",
            "params": [
                {
                    "name": "name",
                    "description": "The asset name ('shot')",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "The path of the asset (asset/path/shot.wav)",
                    "type": "String"
                }
            ],
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 45,
            "description": "Queue an image file to be loaded when the loadAll() method will be called.",
            "params": [
                {
                    "name": "name",
                    "description": "The asset name ('player')",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "The path of the asset (asset/path/player.png)",
                    "type": "String"
                }
            ],
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 59,
            "description": "Retrieves an asset from the assetManager pool.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the asset to be retrieved.",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "asset A game asset like an Image or an Audio file.",
                "type": "[type]"
            },
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 75,
            "description": "Loads all queued assets and will call loadComplete right after.",
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 145,
            "description": "Returns the loading progress in percent.",
            "return": {
                "description": "progress The loading progress in percent.",
                "type": "Number"
            },
            "class": "AssetManager"
        },
        {
            "file": "noname\\assetManager.js",
            "line": 158,
            "description": "Returns true if all assets were loaded.",
            "return": {
                "description": "boolean Is true if all assets were loaded.",
                "type": "Boolean"
            },
            "class": "AssetManager"
        },
        {
            "file": "noname\\clock.js",
            "line": 18,
            "description": "Is actually the game loop delta.",
            "type": "{Number}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 24,
            "description": "Milliseconds since the Clock was started.",
            "type": "{Number}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 32,
            "description": "controls how fast time elapses on that clock.",
            "type": "{Number}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 38,
            "description": "If the clock is paused or not.",
            "type": "{Boolean}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 44,
            "description": "Actual delta time divided by desired delta.",
            "type": "{Number}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 50,
            "description": "An array of clock events.",
            "type": "{Array}",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 68,
            "description": "Calls a function at specified intervals (in milliseconds). It is synchronized\nwhith the clock so motion will be considered in th equation.",
            "itemtype": "method",
            "name": "setInterval",
            "params": [
                {
                    "name": "function",
                    "description": "The function that will be called.",
                    "type": "Function"
                },
                {
                    "name": "milliseconds",
                    "description": "The interval time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "What will be 'this' in the function.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "event the event that holds the event data.",
                "type": "Object"
            },
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 82,
            "description": "Calls a function after a specified number of milliseconds. It is synchronized\nwhith the clock so motion will be considered in th equation.",
            "itemtype": "method",
            "name": "setTimeout",
            "params": [
                {
                    "name": "function",
                    "description": "The function that will be called.",
                    "type": "Function"
                },
                {
                    "name": "milliseconds",
                    "description": "The interval time in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "What will be 'this' in the function.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "event the event that holds the event data.",
                "type": "Object"
            },
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 108,
            "description": "Removes a clock event from the clock events array.",
            "itemtype": "method",
            "name": "clearEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event that will be removed.",
                    "type": "Event"
                }
            ],
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 135,
            "description": "Pauses the clock but not the game.",
            "itemtype": "method",
            "name": "pause",
            "class": "Clock"
        },
        {
            "file": "noname\\clock.js",
            "line": 144,
            "description": "Unpauses the clock.",
            "itemtype": "method",
            "name": "continue",
            "class": "Clock"
        },
        {
            "file": "noname\\events.js",
            "line": 11,
            "description": "All the created events",
            "itemtype": "property",
            "name": "pool",
            "type": "{Events Array}",
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 19,
            "description": "All the emitted events the will be triggered in the next update call",
            "itemtype": "property",
            "name": "emitted",
            "type": "{Emitted events Array}",
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 27,
            "description": "Returns the event if exists.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Event"
            },
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 44,
            "description": "Returns the listeners of an event.",
            "itemtype": "method",
            "name": "getListeners",
            "params": [
                {
                    "name": "Event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Listeners array"
            },
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 55,
            "description": "Returns the listener of an event if it have it.",
            "itemtype": "method",
            "name": "getListener",
            "params": [
                {
                    "name": "Event",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "Listener",
                    "description": "(the function that will be called)",
                    "type": "Listener"
                }
            ],
            "return": {
                "description": "",
                "type": "Listeners"
            },
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 73,
            "description": "Creates an event and adds to it an event listener.\nIf the event already exists, it just adds the listener to the event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "Event",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "Listener",
                    "description": "(the function that will be called)",
                    "type": "Function"
                },
                {
                    "name": "Priority.",
                    "description": "The smaller the higher the priority.",
                    "type": "Number"
                }
            ],
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 101,
            "description": "The same as \"on\" but the listener will be executed only once.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "Event",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "Listener",
                    "description": "(the function that will be called)",
                    "type": "Function"
                },
                {
                    "name": "Priority.",
                    "description": "The smaller the higher the priority.",
                    "type": "Number"
                }
            ],
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 113,
            "description": "Removes a listener of an event. If the event have no more listeners\nthe event will be removed to.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "Event",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "Listener",
                    "description": "(the function that will be called)",
                    "type": "Function"
                }
            ],
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 140,
            "description": "Adds the event to the emitted events pool. The listeners of this events\nwill be emitted when the \"update\" method will be called in order of priority.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "Event",
                    "description": "name",
                    "type": "String"
                }
            ],
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 154,
            "description": "Removes all events in the pool.",
            "itemtype": "method",
            "name": "clear",
            "class": "Events"
        },
        {
            "file": "noname\\events.js",
            "line": 163,
            "description": "Call all the listeners functions of the emitted events order by priority.\nand removes the listeners that have trigger only once.",
            "itemtype": "method",
            "name": "update",
            "class": "Events"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 11,
            "description": "The current state thst being played.",
            "itemtype": "property",
            "name": "current",
            "type": "{Object}",
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 19,
            "description": "The array holding all the states of the game.",
            "itemtype": "property",
            "name": "pool",
            "type": "{Array}",
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 27,
            "description": "Add all the states given in the game setting object.\nIf specified in the game settings will set the initial state otherwise the first\nelement in the array will be used as initial state.",
            "itemtype": "method",
            "name": "init",
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 45,
            "description": "Adds a new state object to the pool.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "state",
                    "description": "The state object you want to add to the pool.",
                    "type": "Object"
                }
            ],
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 55,
            "description": "Set the given state as current (active) state.",
            "itemtype": "method",
            "name": "switch",
            "params": [
                {
                    "name": "stateName",
                    "description": "The state name you want to switch to.",
                    "type": "String"
                }
            ],
            "class": "StateManager"
        },
        {
            "file": "noname\\stateManager.js",
            "line": 69,
            "description": "Get a state by name.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "stateName",
                    "description": "The name of the state you want to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a state otherwise returns false.",
                "type": "Object"
            },
            "class": "StateManager"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nReturns an array with the games assets as items.",
            "line": " noname\\assetManager.js:22"
        },
        {
            "message": "Missing item type\nQueue an audio file to be loaded when the loadAll() method will be called.",
            "line": " noname\\assetManager.js:31"
        },
        {
            "message": "Missing item type\nQueue an image file to be loaded when the loadAll() method will be called.",
            "line": " noname\\assetManager.js:45"
        },
        {
            "message": "Missing item type\nRetrieves an asset from the assetManager pool.",
            "line": " noname\\assetManager.js:59"
        },
        {
            "message": "Missing item type\nLoads all queued assets and will call loadComplete right after.",
            "line": " noname\\assetManager.js:75"
        },
        {
            "message": "Missing item type\nReturns the loading progress in percent.",
            "line": " noname\\assetManager.js:145"
        },
        {
            "message": "Missing item type\nReturns true if all assets were loaded.",
            "line": " noname\\assetManager.js:158"
        },
        {
            "message": "Missing item type\nIs actually the game loop delta.",
            "line": " noname\\clock.js:18"
        },
        {
            "message": "Missing item type\nMilliseconds since the Clock was started.",
            "line": " noname\\clock.js:24"
        },
        {
            "message": "Missing item type\ncontrols how fast time elapses on that clock.",
            "line": " noname\\clock.js:32"
        },
        {
            "message": "Missing item type\nIf the clock is paused or not.",
            "line": " noname\\clock.js:38"
        },
        {
            "message": "Missing item type\nActual delta time divided by desired delta.",
            "line": " noname\\clock.js:44"
        },
        {
            "message": "Missing item type\nAn array of clock events.",
            "line": " noname\\clock.js:50"
        }
    ]
}